version: '3.4'

networks:
  backend:

services:
  userdb:
    container_name: user-db
    image: mysql:8.0.39-oracle
    environment:
      - MYSQL_ROOT_PASSWORD=password@123456
    ports:
      - 8003:3306
    networks:
      - backend

  userservice:
    container_name: user-api
    image: ${DOCKER_REGISTRY-}userservice
    build:
      context: .
      dockerfile: UserService/Dockerfile
    networks:
      - backend
    ports:
      - 8004:8080
      - 8005:8081
    environment:
      - DB_HOST=userdb
      - DB_NAME=dms_user
      - DB_ROOT_PASSWORD=password@123456

  blogdb:
    container_name: blog-db
    image: mysql:8.0.39-oracle
    environment:
      - MYSQL_ROOT_PASSWORD=password@123456
    ports:
      - 8007:3306
    networks:
      - backend

  blogservice:
    container_name: blog-api
    image: ${DOCKER_REGISTRY-}blogservice
    build:
      context: .
      dockerfile: BlogService/Dockerfile
    networks:
      - backend
    ports:
      - 8008:8080
      - 8009:8081
    environment:
      - DB_HOST=blogdb
      - DB_NAME=dms_blog
      - DB_ROOT_PASSWORD=password@123456 

  shopdb:
    container_name: shop-db
    image: mysql:8.0.39-oracle
    environment:
      - MYSQL_ROOT_PASSWORD=password@123456
    ports:
      - 8011:3306
    networks:
      - backend

  shopservice:
    container_name: shop-api
    image: ${DOCKER_REGISTRY-}shopservice
    build:
      context: .
      dockerfile: ShopService/Dockerfile
    networks:
      - backend
    ports:
      - 8012:8080
      - 8013:8081
    environment:
      - DB_HOST=shopdb
      - DB_NAME=dms_shop
      - DB_ROOT_PASSWORD=password@123456  
  
  productdb:
    container_name: product-db
    image: mongo
    ports:
      - 8015:27017
    networks:
      - backend
  
  productservice:
    container_name: product-api
    image: ${DOCKER_REGISTRY-}productservice
    build:
      context: .
      dockerfile: ProductService/Dockerfile
    ports:
      - 8016:8080
      - 8017:8081
    networks:
      - backend
    environment:
      - DB_HOST=productdb
      - DB_NAME=dms_product

  orderdb:
    container_name: order-db
    image: mongo
    ports:
      - 8019:27017
    networks:
      - backend
  
  orderservice:
    container_name: order-api
    image: ${DOCKER_REGISTRY-}orderservice
    build:
      context: .
      dockerfile: OrderService/Dockerfile
    ports:
      - 8020:8080
      - 8021:8081
    networks:
      - backend
    environment:
      - DB_HOST=orderdb
      - DB_NAME=dms_order


